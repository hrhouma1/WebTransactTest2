PARTIE 3
voici la partie 3 1.7.32.jar;C:\Users\Haythem\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-java8time\3.0.4.RELEASE\thymeleaf-extras-java8time-3.0.4.RELEASE.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.6.2\spring-boot-starter-web-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.6.2\spring-boot-starter-json-2.6.2.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.13.1\jackson-databind-2.13.1.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.13.1\jackson-annotations-2.13.1.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.13.1\jackson-core-2.13.1.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.13.1\jackson-datatype-jdk8-2.13.1.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.13.1\jackson-datatype-jsr310-2.13.1.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.13.1\jackson-module-parameter-names-2.13.1.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.6.2\spring-boot-starter-tomcat-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.56\tomcat-embed-core-9.0.56.jar;C:\Users\Haythem\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\9.0.56\tomcat-embed-el-9.0.56.jar;C:\Users\Haythem\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.56\tomcat-embed-websocket-9.0.56.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-web\5.3.14\spring-web-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-beans\5.3.14\spring-beans-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-webmvc\5.3.14\spring-webmvc-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-aop\5.3.14\spring-aop-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-context\5.3.14\spring-context-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-expression\5.3.14\spring-expression-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.6.2\spring-boot-starter-test-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-test\2.6.2\spring-boot-test-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.6.2\spring-boot-test-autoconfigure-2.6.2.jar;C:\Users\Haythem\.m2\repository\com\jayway\jsonpath\json-path\2.6.0\json-path-2.6.0.jar;C:\Users\Haythem\.m2\repository\net\minidev\json-smart\2.4.7\json-smart-2.4.7.jar;C:\Users\Haythem\.m2\repository\net\minidev\accessors-smart\2.4.7\accessors-smart-2.4.7.jar;C:\Users\Haythem\.m2\repository\org\ow2\asm\asm\9.1\asm-9.1.jar;C:\Users\Haythem\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.3\jakarta.xml.bind-api-2.3.3.jar;C:\Users\Haythem\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.2\jakarta.activation-api-1.2.2.jar;C:\Users\Haythem\.m2\repository\org\assertj\assertj-core\3.21.0\assertj-core-3.21.0.jar;C:\Users\Haythem\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Haythem\.m2\repository\org\junit\jupiter\junit-jupiter\5.8.2\junit-jupiter-5.8.2.jar;C:\Users\Haythem\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.8.2\junit-jupiter-api-5.8.2.jar;C:\Users\Haythem\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\Haythem\.m2\repository\org\junit\platform\junit-platform-commons\1.8.2\junit-platform-commons-1.8.2.jar;C:\Users\Haythem\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Haythem\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.8.2\junit-jupiter-params-5.8.2.jar;C:\Users\Haythem\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.8.2\junit-jupiter-engine-5.8.2.jar;C:\Users\Haythem\.m2\repository\org\junit\platform\junit-platform-engine\1.8.2\junit-platform-engine-1.8.2.jar;C:\Users\Haythem\.m2\repository\org\mockito\mockito-core\4.0.0\mockito-core-4.0.0.jar;C:\Users\Haythem\.m2\repository\net\bytebuddy\byte-buddy\1.11.22\byte-buddy-1.11.22.jar;C:\Users\Haythem\.m2\repository\net\bytebuddy\byte-buddy-agent\1.11.22\byte-buddy-agent-1.11.22.jar;C:\Users\Haythem\.m2\repository\org\objenesis\objenesis\3.2\objenesis-3.2.jar;C:\Users\Haythem\.m2\repository\org\mockito\mockito-junit-jupiter\4.0.0\mockito-junit-jupiter-4.0.0.jar;C:\Users\Haythem\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Haythem\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-core\5.3.14\spring-core-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-jcl\5.3.14\spring-jcl-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-test\5.3.14\spring-test-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\xmlunit\xmlunit-core\2.8.4\xmlunit-core-2.8.4.jar;C:\Users\Haythem\.m2\repository\mysql\mysql-connector-java\8.0.27\mysql-connector-java-8.0.27.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.6.2\spring-boot-starter-data-jpa-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.6.2\spring-boot-starter-aop-2.6.2.jar;C:\Users\Haythem\.m2\repository\org\aspectj\aspectjweaver\1.9.7\aspectjweaver-1.9.7.jar;C:\Users\Haythem\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.6.2\spring-boot-starter-jdbc-2.6.2.jar;C:\Users\Haythem\.m2\repository\com\zaxxer\HikariCP\4.0.3\HikariCP-4.0.3.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-jdbc\5.3.14\spring-jdbc-5.3.14.jar;C:\Users\Haythem\.m2\repository\jakarta\transaction\jakarta.transaction-api\1.3.3\jakarta.transaction-api-1.3.3.jar;C:\Users\Haythem\.m2\repository\jakarta\persistence\jakarta.persistence-api\2.2.3\jakarta.persistence-api-2.2.3.jar;C:\Users\Haythem\.m2\repository\org\hibernate\hibernate-core\5.6.3.Final\hibernate-core-5.6.3.Final.jar;C:\Users\Haythem\.m2\repository\org\jboss\logging\jboss-logging\3.4.2.Final\jboss-logging-3.4.2.Final.jar;C:\Users\Haythem\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Haythem\.m2\repository\org\jboss\jandex\2.2.3.Final\jandex-2.2.3.Final.jar;C:\Users\Haythem\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Haythem\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Haythem\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.5\jaxb-runtime-2.3.5.jar;C:\Users\Haythem\.m2\repository\org\glassfish\jaxb\txw2\2.3.5\txw2-2.3.5.jar;C:\Users\Haythem\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.12\istack-commons-runtime-3.0.12.jar;C:\Users\Haythem\.m2\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;C:\Users\Haythem\.m2\repository\org\springframework\data\spring-data-jpa\2.6.0\spring-data-jpa-2.6.0.jar;C:\Users\Haythem\.m2\repository\org\springframework\data\spring-data-commons\2.6.0\spring-data-commons-2.6.0.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-orm\5.3.14\spring-orm-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-tx\5.3.14\spring-tx-5.3.14.jar;C:\Users\Haythem\.m2\repository\org\springframework\spring-aspects\5.3.14\spring-aspects-5.3.14.jar;C:\Users\Haythem\.m2\repository\com\h2database\h2\1.4.200\h2-1.4.200.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Haythem"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-01-17"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-17"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\Haythem\Downloads\Compressed\spring-boot-unit-testing-main\spring-boot-unit-testing-main\3.01-starting-project-solutions\3.01-80-solution-final"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\Haythem\AppData\Local\Temp\surefire14527687733632990473\surefirebooter1711099937525264643.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.6+9-LTS-190"/>
    <property name="user.name" value="Haythem"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Haythem\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\Haythem\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.6"/>
    <property name="user.dir" value="C:\Users\Haythem\Downloads\Compressed\spring-boot-unit-testing-main\spring-boot-unit-testing-main\3.01-starting-project-solutions\3.01-80-solution-final"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Python27;C:\Program Files\Microsoft SDKs\Azure\CLI2\wbin;C:\Program Files (x86)\VMware\VMware Player\bin\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\java8path;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\140\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\;C:\Program Files\Azure Data Studio\bin;%NVM_HOME%;C:\Program Files\nodejs;C:\Program Files\Amazon\AWSCLIV2\;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\150\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\Tools\Binn\;C:\Program Files\Microsoft SQL Server\150\Tools\Binn\;C:\Program Files\Git LFS;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\PuTTY\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\NVIDIA Corporation\Nsight Compute 2024.1.1\;C:\Program Files\Git\cmd;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;C:\Program Files\Java\jre7\\bin;C:\Python27\;C:\Ruby32-x64\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Haythem\AppData\Local\Microsoft\WindowsApps;C:\Users\Haythem\.dotnet\tools;C:\Users\Haythem\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\Azure Data Studio\bin;C:\Users\Haythem\AppData\Roaming\nvm;C:\Program Files\nodejs;C:\Users\Haythem\Documents\apache-maven-3.9.0\bin;C:\Users\Haythem\AppData\Roaming\npm;C:\Program Files\Java\jdk-17\bin;C:\HADOOP\hadoop-3.0.0\bin;C:\HADOOP\spark-3.0.0-bin-hadoop3.2\bin;C:\HADOOP\kafka_2.12-3.5.0\bin;C:\HADOOP\terraform_1.5.3_windows_386;C:\prerequiskubernetes;C:\Users\Haythem\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\Scripts;C:\minikube;C:\ProgramData\anaconda3\Scripts;C:\Program Files\NVIDIA GPU Computing Toolkit\\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\\lib;C:\Program Files\NVIDIA GPU Computing Toolkit\\include;C:\Program Files\NVIDIA GPU Computing Toolkit\\x64;C:\Users\Haythem\AppData\Roaming\npm;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.6+9-LTS-190"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="isStudentNullCheck" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.018"/>
  <testcase name="getGradebookService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.043"/>
  <testcase name="studentInformationService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.012"/>
  <testcase name="isGradeNullCheck" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.008"/>
  <testcase name="createStudentService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.012"/>
  <testcase name="deleteStudentService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.013"/>
  <testcase name="createGradeService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.018"/>
  <testcase name="deleteGradeService" classname="com.luv2code.springmvc.StudentAndGradeServiceTest" time="0.011"/>
</testsuite>

----------------------------
GradebookControllerTest.class
----------------------------
// Source code is decompiled from a .class file using FernFlower decompiler.
package com.luv2code.springmvc;

import com.luv2code.springmvc.models.CollegeStudent;
import com.luv2code.springmvc.models.Gradebook;
import com.luv2code.springmvc.models.GradebookCollegeStudent;
import com.luv2code.springmvc.models.HistoryGrade;
import com.luv2code.springmvc.models.MathGrade;
import com.luv2code.springmvc.models.ScienceGrade;
import com.luv2code.springmvc.models.StudentGrades;
import com.luv2code.springmvc.repository.HistoryGradesDao;
import com.luv2code.springmvc.repository.MathGradesDao;
import com.luv2code.springmvc.repository.ScienceGradesDao;
import com.luv2code.springmvc.repository.StudentDao;
import com.luv2code.springmvc.service.StudentAndGradeService;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.ModelAndViewAssert;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.web.servlet.ModelAndView;

@TestPropertySource({"/application-test.properties"})
@AutoConfigureMockMvc
@SpringBootTest
public class GradebookControllerTest {
   private static MockHttpServletRequest request;
   @Autowired
   private JdbcTemplate jdbc;
   @PersistenceContext
   private EntityManager entityMgr;
   @Autowired
   private StudentDao studentDao;
   @Autowired
   private MathGradesDao mathGradesDao;
   @Autowired
   private ScienceGradesDao scienceGradesDao;
   @Autowired
   private HistoryGradesDao historyGradesDao;
   @Autowired
   private MockMvc mockMvc;
   @Mock
   private StudentAndGradeService studentCreateServiceMock;
   @Autowired
   Gradebook gradebook;
   @Autowired
   CollegeStudent student;
   @Autowired
   StudentAndGradeService studentService;
   @Value("${sql.script.create.student}")
   private String sqlAddStudent;
   @Value("${sql.script.create.math.grade}")
   private String sqlAddMathGrade;
   @Value("${sql.script.create.science.grade}")
   private String sqlAddScienceGrade;
   @Value("${sql.script.create.history.grade}")
   private String sqlAddHistoryGrade;
   @Value("${sql.script.delete.student}")
   private String sqlDeleteStudent;
   @Value("${sql.script.delete.math.grade}")
   private String sqlDeleteMathGrade;
   @Value("${sql.script.delete.science.grade}")
   private String sqlDeleteScienceGrade;
   @Value("${sql.script.delete.history.grade}")
   private String sqlDeleteHistoryGrade;

   public GradebookControllerTest() {
   }

   @BeforeAll
   public static void setup() {
      request = new MockHttpServletRequest();
      request.setParameter("firstname", "Chad");
      request.setParameter("lastname", "Darby");
      request.setParameter("emailAddress", "chad.darby@luv2code_school.com");
   }

   @BeforeEach
   public void each() {
      this.jdbc.execute(this.sqlAddStudent);
      this.jdbc.execute(this.sqlAddMathGrade);
      this.jdbc.execute(this.sqlAddScienceGrade);
      this.jdbc.execute(this.sqlAddHistoryGrade);
   }

   @Transactional
   @Test
   public void getStudentsHttpRequest() throws Exception {
      GradebookCollegeStudent studentOne = new GradebookCollegeStudent("Eric", "Roby", "eric_roby@luv2code_school.com");
      studentOne.setStudentGrades(new StudentGrades());
      GradebookCollegeStudent studentTwo = new GradebookCollegeStudent("Chad", "Darby", "chad_darby@luv2code_school.com");
      studentTwo.setStudentGrades(new StudentGrades());
      List<GradebookCollegeStudent> students = new ArrayList(Arrays.asList(studentOne, studentTwo));
      this.gradebook.setStudents(students);
      Mockito.when(this.studentCreateServiceMock.getGradebook()).thenReturn(this.gradebook);
      Assertions.assertEquals("Roby", ((GradebookCollegeStudent)this.studentCreateServiceMock.getGradebook().getStudents().get(0)).getLastname(), "Id should be 1");
      Assertions.assertEquals("Chad", ((GradebookCollegeStudent)this.studentCreateServiceMock.getGradebook().getStudents().get(1)).getFirstname(), "Firstname Chad");
      this.student.setFirstname("Chad");
      this.student.setLastname("Darby");
      this.student.setEmailAddress("chad.darby@luv2code_school.com");
      this.entityMgr.persist(this.student);
      this.entityMgr.flush();
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/", new Object[0])).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "index");
   }

   @Test
   public void createStudentHttpRequest() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("firstname", request.getParameterValues("firstname")).param("lastname", request.getParameterValues("lastname")).param("emailAddress", request.getParameterValues("emailAddress"))).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "index");
      CollegeStudent verifyStudent = this.studentDao.findByEmailAddress("chad.darby@luv2code_school.com");
      Assertions.assertNotNull(verifyStudent, "Student should be found after create");
   }

   @Test
   public void deleteStudentHttpRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/delete/student/{id}", new Object[]{1})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "index");
      Assertions.assertFalse(this.studentDao.findById(1).isPresent());
   }

   @Test
   public void studentInformationHttpRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/studentInformation/{id}", new Object[]{1})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
   }

   @Test
   public void studentInformationHttpStudentDoesNotExistRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/studentInformation/{id}", new Object[]{1001})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void createMathGradeHttpRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      GradebookCollegeStudent student = this.studentService.studentInformation(1);
      Assertions.assertEquals(1, student.getStudentGrades().getMathGradeResults().size());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"85.00"}).param("gradeType", new String[]{"math"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      student = this.studentService.studentInformation(1);
      Assertions.assertEquals(2, student.getStudentGrades().getMathGradeResults().size());
   }

   @Test
   public void createScienceGradeHttpRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      GradebookCollegeStudent student = this.studentService.studentInformation(1);
      Assertions.assertEquals(1, student.getStudentGrades().getScienceGradeResults().size());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"85.00"}).param("gradeType", new String[]{"science"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      student = this.studentService.studentInformation(1);
      Assertions.assertEquals(2, student.getStudentGrades().getScienceGradeResults().size());
   }

   @Test
   public void createHistoryGradeHttpRequest() throws Exception {
      Assertions.assertTrue(this.studentDao.findById(1).isPresent());
      GradebookCollegeStudent student = this.studentService.studentInformation(1);
      Assertions.assertEquals(1, student.getStudentGrades().getHistoryGradeResults().size());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"85.00"}).param("gradeType", new String[]{"history"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      student = this.studentService.studentInformation(1);
      Assertions.assertEquals(2, student.getStudentGrades().getHistoryGradeResults().size());
   }

   @Test
   public void createHistoryGradeHttpStudentDoesNotExistEmptyResponse() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"85.00"}).param("gradeType", new String[]{"history"}).param("studentId", new String[]{"0"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void createHistoryGradeHttpGradeTypeDoesNotExistEmptyResponse() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"85.00"}).param("gradeType", new String[]{"literature"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void createHistoryGradeHttpGradeIsHigherThan100EmptyResponse() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"101.00"}).param("gradeType", new String[]{"history"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void createHistoryGradeHttpGradeIsNegativeEmptyResponse() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post("/grades", new Object[0]).contentType(MediaType.APPLICATION_JSON).param("grade", new String[]{"-5"}).param("gradeType", new String[]{"history"}).param("studentId", new String[]{"1"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void deleteMathGradeHttpRequest() throws Exception {
      Optional<MathGrade> mathGrade = this.mathGradesDao.findById(1);
      Assertions.assertTrue(mathGrade.isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}", new Object[]{1, "math"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      mathGrade = this.mathGradesDao.findById(1);
      Assertions.assertFalse(mathGrade.isPresent());
   }

   @Test
   public void deleteScienceGradeHttpRequest() throws Exception {
      Optional<ScienceGrade> scienceGrade = this.scienceGradesDao.findById(1);
      Assertions.assertTrue(scienceGrade.isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}", new Object[]{1, "science"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      scienceGrade = this.scienceGradesDao.findById(1);
      Assertions.assertFalse(scienceGrade.isPresent());
   }

   @Test
   public void deleteHistoryGradeHttpRequest() throws Exception {
      Optional<HistoryGrade> historyGrade = this.historyGradesDao.findById(1);
      Assertions.assertTrue(historyGrade.isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}", new Object[]{1, "history"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "studentInformation");
      historyGrade = this.historyGradesDao.findById(1);
      Assertions.assertFalse(historyGrade.isPresent());
   }

   @Test
   public void deleteGradeHttpRequestStudentIdDoesNotExistEmptyResponse() throws Exception {
      Optional<HistoryGrade> historyGrade = this.historyGradesDao.findById(2);
      Assertions.assertFalse(historyGrade.isPresent());
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}", new Object[]{2, "history"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @Test
   public void deleteGradeHttpRequestGradeTypeDoesNotExistEmptyResponse() throws Exception {
      MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}", new Object[]{2, "literature"})).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();
      ModelAndView mav = mvcResult.getModelAndView();
      ModelAndViewAssert.assertViewName(mav, "error");
   }

   @AfterEach
   public void setupAfterTransaction() {
      this.jdbc.execute(this.sqlDeleteStudent);
      this.jdbc.execute(this.sqlDeleteMathGrade);
      this.jdbc.execute(this.sqlDeleteScienceGrade);
      this.jdbc.execute(this.sqlDeleteHistoryGrade);
   }
}


-----------------------------
StudentAndGradeServiceTest.class
-----------------------------

// Source code is decompiled from a .class file using FernFlower decompiler.
package com.luv2code.springmvc;

import com.luv2code.springmvc.models.CollegeStudent;
import com.luv2code.springmvc.models.Gradebook;
import com.luv2code.springmvc.models.GradebookCollegeStudent;
import com.luv2code.springmvc.models.HistoryGrade;
import com.luv2code.springmvc.models.MathGrade;
import com.luv2code.springmvc.models.ScienceGrade;
import com.luv2code.springmvc.repository.HistoryGradesDao;
import com.luv2code.springmvc.repository.MathGradesDao;
import com.luv2code.springmvc.repository.ScienceGradesDao;
import com.luv2code.springmvc.repository.StudentDao;
import com.luv2code.springmvc.service.StudentAndGradeService;
import java.util.Iterator;
import java.util.Optional;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

@TestPropertySource({"/application-test.properties"})
@SpringBootTest
public class StudentAndGradeServiceTest {
   @Autowired
   private JdbcTemplate jdbc;
   @Autowired
   private StudentDao studentDao;
   @Autowired
   private MathGradesDao mathGradeDao;
   @Autowired
   private ScienceGradesDao scienceGradeDao;
   @Autowired
   private HistoryGradesDao historyGradeDao;
   @Autowired
   private StudentAndGradeService studentService;
   @Value("${sql.script.create.student}")
   private String sqlAddStudent;
   @Value("${sql.script.create.math.grade}")
   private String sqlAddMathGrade;
   @Value("${sql.script.create.science.grade}")
   private String sqlAddScienceGrade;
   @Value("${sql.script.create.history.grade}")
   private String sqlAddHistoryGrade;
   @Value("${sql.script.delete.student}")
   private String sqlDeleteStudent;
   @Value("${sql.script.delete.math.grade}")
   private String sqlDeleteMathGrade;
   @Value("${sql.script.delete.science.grade}")
   private String sqlDeleteScienceGrade;
   @Value("${sql.script.delete.history.grade}")
   private String sqlDeleteHistoryGrade;

   public StudentAndGradeServiceTest() {
   }

   @BeforeEach
   public void setupDatabase() {
      this.jdbc.execute(this.sqlAddStudent);
      this.jdbc.execute(this.sqlAddMathGrade);
      this.jdbc.execute(this.sqlAddScienceGrade);
      this.jdbc.execute(this.sqlAddHistoryGrade);
   }

   @Test
   public void isStudentNullCheck() {
      Assertions.assertTrue(this.studentService.checkIfStudentIsNull(1), "@BeforeTransaction creates student : return true");
      Assertions.assertFalse(this.studentService.checkIfStudentIsNull(0), "No student should have 0 id : return false");
   }

   @Test
   public void createStudentService() {
      this.studentService.createStudent("Chad", "Darby", "chad.darby@luv2code_school.com");
      CollegeStudent student = this.studentDao.findByEmailAddress("chad.darby@luv2code_school.com");
      Assertions.assertEquals("chad.darby@luv2code_school.com", student.getEmailAddress(), "find by email");
   }

   @Test
   @Rollback(true)
   public void deleteStudentService() {
      Optional<CollegeStudent> deletedCollegeStudent = this.studentDao.findById(1);
      Optional<MathGrade> deletedMathGrade = this.mathGradeDao.findById(1);
      Optional<ScienceGrade> deletedScienceGrade = this.scienceGradeDao.findById(1);
      Optional<HistoryGrade> deletedHistoryGrade = this.historyGradeDao.findById(1);
      Assertions.assertTrue(deletedCollegeStudent.isPresent(), "return true");
      Assertions.assertTrue(deletedMathGrade.isPresent(), "return true");
      Assertions.assertTrue(deletedScienceGrade.isPresent(), "return true");
      Assertions.assertTrue(deletedHistoryGrade.isPresent(), "return true");
      this.studentService.deleteStudent(1);
      deletedCollegeStudent = this.studentDao.findById(1);
      deletedMathGrade = this.mathGradeDao.findById(1);
      deletedScienceGrade = this.scienceGradeDao.findById(1);
      deletedHistoryGrade = this.historyGradeDao.findById(1);
      Assertions.assertFalse(deletedCollegeStudent.isPresent(), "return false");
      Assertions.assertFalse(deletedMathGrade.isPresent(), "return false");
      Assertions.assertFalse(deletedScienceGrade.isPresent(), "return false");
      Assertions.assertFalse(deletedHistoryGrade.isPresent(), "return false");
   }

   @Test
   public void studentInformationService() {
      GradebookCollegeStudent gradebookCollegeStudentTest = this.studentService.studentInformation(1);
      Assertions.assertNotNull(gradebookCollegeStudentTest);
      Assertions.assertEquals(1, gradebookCollegeStudentTest.getId());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getFirstname());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getLastname());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getEmailAddress());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getStudentGrades().getMathGradeResults());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getStudentGrades().getScienceGradeResults());
      Assertions.assertNotNull(gradebookCollegeStudentTest.getStudentGrades().getHistoryGradeResults());
      Assertions.assertEquals("Eric", gradebookCollegeStudentTest.getFirstname());
      Assertions.assertEquals("Roby", gradebookCollegeStudentTest.getLastname());
      Assertions.assertEquals("eric.roby@luv2code_school.com", gradebookCollegeStudentTest.getEmailAddress());
   }

   @Test
   public void isGradeNullCheck() {
      Assertions.assertTrue(this.studentService.checkIfGradeIsNull(1, "math"), "@BeforeTransaction creates student : return true");
      Assertions.assertTrue(this.studentService.checkIfGradeIsNull(1, "science"), "@BeforeTransaction creates student : return true");
      Assertions.assertTrue(this.studentService.checkIfGradeIsNull(1, "history"), "@BeforeTransaction creates student : return true");
      Assertions.assertFalse(this.studentService.checkIfGradeIsNull(0, "science"), "No student should have 0 id : return false");
      Assertions.assertFalse(this.studentService.checkIfGradeIsNull(0, "Literature"), "No student should have 0 id : return false");
   }

   @Test
   public void deleteGradeService() {
      Assertions.assertEquals(1, this.studentService.deleteGrade(1, "math"), "@BeforeTransaction creates student : return true");
      Assertions.assertEquals(1, this.studentService.deleteGrade(1, "science"), "@BeforeTransaction creates student : return true");
      Assertions.assertEquals(1, this.studentService.deleteGrade(1, "history"), "@BeforeTransaction creates student : return true");
      Assertions.assertEquals(0, this.studentService.deleteGrade(0, "science"), "No student should have 0 id : return false");
      Assertions.assertEquals(0, this.studentService.deleteGrade(1, "literature"), "No student should have 0 id : return false");
   }

   @Test
   public void createGradeService() {
      this.studentService.createGrade(80.5, 2, "math");
      this.studentService.createGrade(80.5, 2, "science");
      this.studentService.createGrade(80.5, 2, "history");
      this.studentService.createGrade(80.5, 2, "literature");
      Iterable<MathGrade> mathGrades = this.mathGradeDao.findGradeByStudentId(2);
      Iterable<ScienceGrade> scienceGrades = this.scienceGradeDao.findGradeByStudentId(2);
      Iterable<HistoryGrade> historyGrades = this.historyGradeDao.findGradeByStudentId(2);
      Assertions.assertTrue(mathGrades.iterator().hasNext(), "Student Service creates the grade: return true");
      Assertions.assertTrue(scienceGrades.iterator().hasNext(), "Student Service creates the grade: return true");
      Assertions.assertTrue(historyGrades.iterator().hasNext(), "Student Service creates the grade: return true");
   }

   @SqlGroup({@Sql(
   scripts = {"/insertData.sql"},
   config = @SqlConfig(
   commentPrefix = "`"
)
), @Sql({"/overrideData.sql"}), @Sql({"/insertGrade.sql"})})
   @Test
   public void getGradebookService() {
      Gradebook gradebook = this.studentService.getGradebook();
      Gradebook gradebookTest = new Gradebook();
      Iterator var4 = gradebook.getStudents().iterator();

      while(var4.hasNext()) {
         GradebookCollegeStudent student = (GradebookCollegeStudent)var4.next();
         if (student.getId() > 10) {
            gradebookTest.getStudents().add(student);
         }
      }

      Assertions.assertEquals(4, gradebookTest.getStudents().size());
      Assertions.assertTrue(((GradebookCollegeStudent)gradebookTest.getStudents().get(0)).getStudentGrades().getHistoryGradeResults() != null);
      Assertions.assertTrue(((GradebookCollegeStudent)gradebookTest.getStudents().get(0)).getStudentGrades().getScienceGradeResults() != null);
      Assertions.assertTrue(((GradebookCollegeStudent)gradebookTest.getStudents().get(0)).getStudentGrades().getMathGradeResults() != null);
   }

   @AfterEach
   public void setupAfterTransaction() {
      this.jdbc.execute(this.sqlDeleteStudent);
      this.jdbc.execute(this.sqlDeleteMathGrade);
      this.jdbc.execute(this.sqlDeleteScienceGrade);
      this.jdbc.execute(this.sqlDeleteHistoryGrade);
   }
}


---------
pom.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.2</version>
		<relativePath/>
	</parent>

	<groupId>com.luv2code</groupId>
	<artifactId>spring-boot-mvc-testing-demo</artifactId>
	<version>1.0.0</version>
	<packaging>war</packaging>

	<properties>
		<java.version>17</java.version>
	</properties>

	<dependencies>
	
		<!-- thymeleaf view -->	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		
		<!-- web related dependency -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- mysql java connector -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<!-- spring data jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>



---------------------------------
application-test.properties
---------------------------------

## H2 Test Database creds
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.initialization-mode=always
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql = true


## SQL Scripts

sql.script.create.student=insert into student(id,firstname,lastname,email_address) \
  values (1,'Eric', 'Roby', 'eric.roby@luv2code_school.com')
sql.script.create.math.grade=insert into math_grade(id,student_id,grade) values (1,1,100.00)
sql.script.create.science.grade=insert into science_grade(id,student_id,grade) values (1,1,100.00)
sql.script.create.history.grade=insert into history_grade(id,student_id,grade) values (1,1,100.00)

sql.script.delete.student=DELETE FROM student
sql.script.delete.math.grade=DELETE FROM math_grade
sql.script.delete.science.grade=DELETE FROM science_grade
sql.script.delete.history.grade=DELETE FROM history_grade



---------------------------------
application.properties
---------------------------------

info.school.name=luv2code
info.app.name=My Super Cool Gradebook
info.app.description=a fun way to track student grades!
info.app.version=1.0.0

## Server Properties
server.port= 1500

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.initialization-mode=always
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql = true
# spring.jpa.hibernate.ddl-auto=create
# spring.jpa.hibernate.ddl-auto=none